import React, { useState, useEffect } from 'react'

const re = React.createElement

const STATUS_MOVE = 'move'
const STATUS_INVEST = 'invest'
const STATUS_PAY = 'pay'
const STATUS_CHANCE = 'chance'
const STATUS_JAIL = 'jail'

/*
  roll -> phase === 'move'
       -> move
       -> targetType !== 0 && isOwned ? buy : isOwnedByYourself ? upgrade : pay
       -> isOnemoreChance ? roll : next
*/

const CELLS = [
  { name: 'start', type: '0' },
  { name: 'beijing', type: '1', value: 450 },
  { name: 'shanghai', type: '1', value: 500  },
  { name: 'shenzhen', type: '2', value: 425 },
  { name: 'guangzhou', type: '2', value: 400 },
  { name: 'chance', type: '0' },
  { name: 'hangzhou', type: '2', value: 425 },
  { name: 'chengdu', type: '2', value: 375 },
  { name: 'shenyang', type: '3', value: 285 },
  { name: 'dalian', type: '3', value: 280 },
  { name: 'jail', type: '0' },
]

const PLAYERS = [ 'zhao', 'qian', 'sun', 'li' ]
const DICE_NUMBER = 2

function randomDice() {
  return Math.floor(Math.random() * 6) + 1
}

function getNextStatus(current, decision) {

}

function Game() {
  const [ turn, setTurn ] = useState(0)
  const [ dices, setDices ] = useState(Array(DICE_NUMBER).fill(0))

  const [ cells, setCells ] = useState(CELLS.slice())
  const [ players, setPlayers ] = useState(PLAYERS.slice().map(
    (name, i) => ({
      name,
      clsName: `player${i}`,
      position: 0,
      properties: new Map(),
      cash: 1000,
      status: STATUS_MOVE,
    })
  ))
  const [ isChoice, setChoice ] = useState(0)
  const [ message, setMessage ] = useState('')

  function move(i, steps) {
    const newPlayers = players.slice()
    const newCells = cells.slice()

    newPlayers[i].position = (newPlayers[i].position + steps) % cells.length

    newCells[newPlayers[i].position].player = newPlayers[i]
    setPlayers(newPlayers)
    setCells(newCells)
  }

  function moveTo(i, next) {
    if(typeof next === 'string')
      next = cells.findIndex(cell => cell.name === next)
    else
      next %= cells.length
    updatePlayers(i, 'position', next)
    updateCells(next, 'player', i)
  }

  function trigerPay(i, j, cost, cb) {
    setMessage(`player: ${players[i].name} pay {${cost}} to ${players[j].name}!`)
    const newPlayers = players.slice()
    newPlayers[i].cash -= cost
    newPlayers[j].cash += cost
    setPlayers(newPlayers)

    cb ? cb() : setTurn(turn + 1)
  }

  function trigerInvest(i) {
    const newPlayers = players.slice()
    const cell = cells[newPlayers.position]
    newPlayers[i].properties.set(cell.type, cell)
    setPlayers(newPlayers)
    updateCells(newPlayers.position, 'ownedBy', i)
  }

  function handlePhaseMove(i) {
    move(i, dices.reduce((a, b) => a + b))
  }

  function updatePlayers(i, p, v) {
    const newPlayers = players.slice()
    newPlayers[i][p] = v
    setPlayers(newPlayers)
  }

  function updateCells(i, p, v) {
    const newCells = cells.slice()
    newCells[i][p] = v
    setCells(newCells)
  }

  function handleRoll(i, diceSize = DICE_NUMBER) {
    setDices(Array(diceSize).fill(0).map(() => randomDice()))

    if(players[i].status === STATUS_MOVE) {
      handlePhaseMove(i)
      handleStop(i)
    } else if(players[i].status === STATUS_JAIL) {
      if(i === 1) { // only the same results can change status(to move)
        updatePlayers(i, 'status', STATUS_MOVE)
      } else {
        setTurn(i + 1)
      }
    } else if(players[i].status === STATUS_INVEST) {
      1
    }
  }

  function handleStop(i) {
    const player = players[i]
    const cell = cells[players.position]

    if(cell.type === 0) {
      if(cell.name === 'start')
        updatePlayers(i, 'cash', players[i].cash + 200)
      else if(cell.name === 'jail')
        moveTo(i, 'jail')
        updatePlayers(i, 'status', STATUS_JAIL)
      // TODO: and so on...
    } else {
      if(cell.ownedBy !== player)
        trigerPay(i, cell.ownedBy, cell.cost[cell.level])
      else {
        setChoice(1)
        updatePlayers(i, 'status', STATUS_INVEST)
        trigerInvest(i, cell.value)
      }
    }

    setTurn(i + 1)
  }

  // useEffect(() => {
  //
  // })

  return re(
    'div',
    null,
    re(Board, { players, cells, dices, handleRoll, turn, message, isChoice }),
  )
}

function Board({ players, cells, dices, handleRoll, turn, message, isChoice }) {
  return (
    <div>
      <div>
        <button onClick={ () => handleRoll() } onKeyUp={ handleRoll }>
          { players[turn] }&#39s turn
        </button>
        <label>last rolled: [ { dices } ]</label>
      </div>
      <ul className="block">
        {
          cells.map(cell =>
            <Cell key={cell.name} name={cell.name}
              type={cell.type} player={cell.player} />
          )
        }
      </ul>
      { isChoice ? <Choice /> : '' }
      { message ? <Message message={message} /> : '' }
    </div>
  )
}

function Cell({ name, type, player, ownedBy }) {
  return (
    <li>
      <div>
        <span>{ name }: </span>
        <span>{ type }</span>
        <span>ownedBy: { ownedBy && 'noone' }</span>
      </div>
      { player }
    </li>
  )
}

function Player({ name, properties, cash }) {
  return (
    <div> Player: {name} </div>
  )
}

function Message({ msg }) {
  return re(
    'p',
    msg
  )
}

function Choice({ handleOKClick, handleNGClick }) {
  return re(
    'div',
    null,
    re('button', { onClick: handleOKClick }, 'OK'),
    re('button', { onClick: handleNGClick }, 'NG')
  )
}
